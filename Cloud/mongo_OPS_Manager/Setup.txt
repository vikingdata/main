

This is just an overview to describe the setup.
In this directory will be notes how to setup ops manager, ansible, AWS,


1. 4 OPS Managers
   a.master, dev, qa, prod
   b. Use? Automation, Backups, and Monitoring

2. Automation: Jenkins, Ansible, Redt API, and Python scripts
   a. NOTE: Ansible is written in Python and the REST API can use Python.
     So one main programming language.

3. Security
   a. LDAP, SSL, Kerberos, etc. Some Sys Admin work involved here. 
   b. You should use encryption at rest
   c. Auditing would be nice.

The directories here should be:
servers
  opsmanager
    For purposes you may not use ops manager because it is for
    backups, monitoring, and it can be taken care of in other
    ways. Have ansible make nagios alarms and cronjobs for backups. 
  ansible
    ubuntu
    mongo
  jenkins CI/CD
  apache Spark -- read data from mongo to perform actions
    This one will be last. 
and thee directories will contain config, howto docs, and code.


1. Things to take care of in OPS Manager:
   1.mongo update
   2.kernel update
   3.server replacements
   4. Monitoring
   5. Backups

Flow of data
1. Data in

Software purposes
1.git software control
2. mongodb -- to store data
3. apackespark -- process data and make reports
4. Ansible -- instal mongo, database and kernel upgrades, server replacements
   , and also integration with OPS manager for backups, monitoring.
5. Ops Manager --- rest API anisble uses.
5.Jenkins - CI/CD orhestration of deployment processes. 
6. yum for centos, or apt-get for ubuntu -- ansible integration with
   respository to detect software changes. Repository should be controlled
   by your respository where you add stuff to it. 

Kernel upgrade
1. Check mongo health and system checks.
2. Check kernel
3. If current kernel abort process on this node. 
3. Stop mongodb
4. Install kernel and reboot.
5. After reboot, Starts ops manager automation and mongodb should start.
6. Check system and mongo.

Mongo upgrade

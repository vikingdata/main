
Links:
1. https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.BestPractices.html
2. https://docs.amazonaws.cn/en_us/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.RDSMySQL.Replica.html
3.https://aws.amazon.com/premiumsupport/knowledge-center/migrate-mysql-aurora-innobackup/
4. https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html 


Presteps

1. Upgrade MySQL or PostgreSQL first. It you want.....
  a. Aurora MySQL 1.x then MySQL 5.6.10a.
  b. Aurora MySQL 2.x then MySQL MySQL 5.7.12
  c. For PostgreSQL refer to https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html

2. So a Schema Check for all the masters and slaves.
3. Do a data check for all the Master and Slaves.
4. Remove as many slow queries as possible.
5. Trim as much data as possible and implement monthly trimming of data.
6. If possible, separate out tables and databases to servers based on purpose.
7. RECOMMNDED: Use GTID for replication. 

AWS Work in Developement and/or QA. Both is recommended. 

1. Decide to use GTID or not.
2. DEV: Setup Aurora with read replicas and a dedicated failover.
  a. Some fead replicas should be for queries.
  b. Independent read replicas and be used Parallel Queries or BI purposes
     or known long running queries not affecting customer live actions.
  c. Load data into Aurora from backups using on of the recommended restore
     methods.
3. DEV: Setup network and security accounts.
  a. There is a lot more to do for this than is mentioned here.
4. DEV: Setup Master-Master or Master-Slave between datacenter and Aurora.
  a. If master-master: You should have them auto incremented or one set
     to read-only.
5. DEV: This is developmnent only, perform Failover Steps.
   a. There is a lot of steps to perform a failover from one server to another.
   b. You can do it manually or use ProxySQL or MHA.
   c. Details are no covered here. It also depends if you use regular
      replication or GTID.

6. Validate Failover.

AWS pre- work in Production

1. Calculate latency between applications and database in Aurora.
2. Make a choice to migrate to databases or applications, or maybe a combo.
   a. We will assume the databases are migrated first.
   b. Make a decision to improve latency or query times so that the amount
      of time query takes are acceptable.
3. Decide on Downtime for applications.

AWS Failover 

4. Start downtime.
5. Verify no application connections exist.
6. Put database in read-only.
7. Perform similar steps in "AWS Work in Developement and/or QA." but write
   them out separately.
8. Put the Aurora into a writable state and to replicate back to other
   servers if not already.
9. Applications and other things should be reconfigured to use Aurora and
   read replicas.
10. Turn on applications ONLY for QA./
11. Verify QA requirements.
    a. Should include latency requirements and query times.
12. Turn on for customers.
13. Remove downtime. 
14. The old datacenter should now be your failover datacenter.    

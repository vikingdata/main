
   # Run Repl.txt first.  
   # We are going to make a 6 cluster, with a non failover slave, arbiter, and hidden

echo " You may want to
apt-get install python2
apt install python2.7 python-pip
apt-get install python-mysqldb
python -m easy_install pymongo


"

mongod_options=" --oplogSize 50 --replSet r --bind_ip 127.0.0.1 --wiredTigerDirectoryForIndexes --wiredTigerMaxCacheOverflowFileSizeGB=50 "

mongod_options1="  $mongod_options  --dbpath mongo/d1 --port 3001"
mongod_options2="  $mongod_options  --dbpath mongo/d2 --port 3002"
mongod_options3="  $mongod_options  --dbpath mongo/d3 --port 3003"

mongod_options4="  $mongod_options  --dbpath mongo/d4 --port 3004"
mongod_options5="  $mongod_options  --dbpath mongo/d5 --port 3005"
mongod_options6="  $mongod_options  --dbpath mongo/d6 --port 3006"

  # If restarting, kill the mogo processes and then do
killall mongod 2>/dev/null
sleep 1
killall -9 mongod 2>/devnull
sleep 1
rm -rf  mongo/d1 mongo/d2 mongo/d3 mongo/logs mongo/d4 mongo/d5 mongo/d6
  # Setup 3 directories:
mkdir -p mongo/d1 mongo/d2 mongo/d3 mongo/logs mongo/d4 mongo/d5 mongo/d6
  # Start once mongo instance
echo "Starting first mongod"
mongod $mongod_options1 > mongo/logs/1.log 2>&1  &
sleep 2
    # In  the mongo shell
echo "Starting replica set"
mongo --port 3001 --eval "rs.initiate( { _id: 'r', version: 1, members: [ {_id :0, host: 'localhost:3001' } ] } )"

  # Start and add two other replica sets
echo "Adding in 2 more mongod"
mongod $mongod_options2 > mongo/logs/2.log 2>&1  &
mongod $mongod_options3 > mongo/logs/3.log 2>&1  &
sleep 2
mongo --port 3001 --eval "rs.add('localhost:3002')"
sleep 2
mongo --port 3001 --eval "rs.add('localhost:3003')"
sleep 2



   # Start the arbiter and hidden servers.
   # d4 is a non failover sceondary, d5 is arbiter, d6 is hidden 
echo "starting mongo 4, 5, 6"
mongod $mongod_options4 > mongo/logs/4.log 2>&1  &
mongod $mongod_options5 > mongo/logs/5.log 2>&1  &
mongod $mongod_options6 > mongo/logs/6.log 2>&1  &
sleep 5

echo "Adding secondary priority 0 , an arbiter, and delay"
   # Add the non failover secondary, arbiter, and hidden with delay.
   mongo --port 3001 --eval "rs.add({ host: 'localhost:3004', priority: 0})"
sleep 1
   mongo --port 3001 --eval "rs.addArb('localhost:3005')"
sleep 1
   mongo --port 3001 --eval "rs.add({ host: 'localhost:3006', hidden: 0, priority: 0, "slaveDelay" : 10 })"
sleep 3

echo "Make sure everything is replicating"
mongo --port 3001 --eval "rs.status()" | egrep 'name|stateStr'
sleep 1


echo "Adding data"
  # Lets add some data. 
echo "
function fillData() { 
    db = db.getSiblingDB('test')
    db.no.insert({valiue: 1});
    db.no.drop();

    for( var i = 0; i < 1000; i++ ) {
        db.no.insert( {value: i } );
    }
}
fillData()
" > mongo/fill.js

mongo --port 3001 mongo/fill.js

  # Should be 1000 entries
mongo  --quiet --port 3001 --eval "db.no.count()" test

# now we do python and bash
# You must have the 6 mongo servers running in Replicatikon_setup.txt  and Replication_setup2.txt.
  # The replication in the replica set must be setup. 

  # Make sure pymongo is installed. 
  # https://docs.mongodb.com/manual/installation/

echo '#!/usr/bin/python

# Submit port to the this script as './pymongo.py 3001' for exmaple. 

import sys

try:     port = int(sys.argv[1])
except:  port = 3001

try:     slaveOk = sys.argv[2]
except:  slaveOk = None  

import pymongo
if slaveOk is not None:
  client = pymongo.MongoClient("localhost:" + str(port), readPreference="secondaryPreferred")
else:
  client = pymongo.MongoClient("localhost:" + str(port))
db = client.test
count = db.no.count()
hi = db.command("hostInfo")

print "count :", count, ": port :", port, ": hostname :", hi["system"]["hostname"]
' > mongo/pymongo_test.py
chmod 755 mongo/pymongo_test.py

rm -rf  mongo/pymongo 
mkdir -p mongo/pymongo mongo/logs 


  # Connect to primary and verify we have data. 
  # All of these should have 1000 as the result if you did Replication_setup and Replication_setup2. 

  # These should all fail, but for me it, worked, weird, except for 5 the arbiter. 
  # I am upset because all but 1 should fail, but isn't. 
  # Might be a default setting I need to get rid of for pymongo, not sure. 
./mongo/pymongo_test.py 3001
./mongo/pymongo_test.py 3002
./mongo/pymongo_test.py 3003
./mongo/pymongo_test.py 3004
./mongo/pymongo_test.py 3005
./mongo/pymongo_test.py 3006


  # Now add slaveok, and only 5 should fail. 
./mongo/pymongo_test.py 3001 1 
./mongo/pymongo_test.py 3002 1
./mongo/pymongo_test.py 3003 1
./mongo/pymongo_test.py 3004 1
./mongo/pymongo_test.py 3005 1
./mongo/pymongo_test.py 3006 1

  # These mongo shell commands will fail but primary
mongo --quiet --port 3001 --eval "db.no.count()" test
mongo --quiet --port 3002 --eval "db.no.count()" test
mongo --quiet --port 3003 --eval "db.no.count()" test
mongo --quiet --port 3004 --eval "db.no.count()" test
mongo --quiet --port 3005 --eval "db.no.count()" test
mongo --quiet --port 3006 --eval "db.no.count()" test
  
  #Only 5 should fail. 
mongo --quiet --port 3001 --eval "rs.slaveOk(); db.no.count()" test
mongo --quiet --port 3002 --eval "rs.slaveOk(); db.no.count()" test
mongo --quiet --port 3003 --eval "rs.slaveOk(); db.no.count()" test
mongo --quiet --port 3004 --eval "rs.slaveOk(); db.no.count()" test
mongo --quiet --port 3005 --eval "rs.slaveOk(); db.no.count()" test
mongo --quiet --port 3006 --eval "rs.slaveOk(); db.no.count()" test


  # We will use the new methods ReadPerference and not slaveOK. 
  # You must have ran Replication_setup.txt and Replication_setup2.txt beforehand. 

echo '
function hi() { 
  hinfo = db.runCommand("hostInfo")["system"]["hostname"];     
  print(hinfo);
}
hi();
print(db.no.count());
' > mongo/hc.js


  # Only the primary will work both times.
  # We try to print the port and the count. 
  # The count will fail on the rest, but the host and port will print.  
mongo --quiet --port 3001 mongo/hc.js
mongo --quiet --port 3002 mongo/hc.js
mongo --quiet --port 3003 mongo/hc.js
mongo --quiet --port 3004 mongo/hc.js
mongo --quiet --port 3005 mongo/hc.js
mongo --quiet --port 3006 mongo/hc.js

echo '
function hi() {
  hinfo = db.runCommand("hostInfo")["system"]["hostname"];
  print(hinfo);
}
hi();

db.getMongo().setReadPref("primaryPreferred");
print(db.no.count());
' > mongo/hc2.js

  # All should work but aritrary. Its data part should fail. 
mongo --quiet --port 3001 mongo/hc2.js
mongo --quiet --port 3002 mongo/hc2.js
mongo --quiet --port 3003 mongo/hc2.js
mongo --quiet --port 3004 mongo/hc2.js
mongo --quiet --port 3005 mongo/hc2.js
mongo --quiet --port 3006 mongo/hc2.js


